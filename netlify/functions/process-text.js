// This is a Netlify Function that acts as a secure proxy to the Gemini API.
exports.handler = async function (event) {
    // Only allow POST requests
    if (event.httpMethod !== 'POST') {
        return { 
            statusCode: 405, 
            body: JSON.stringify({ error: 'Method Not Allowed' }) 
        };
    }

    try {
        // Get the API key from environment variables
        const apiKey = process.env.GEMINI_API_KEY;
        if (!apiKey) {
            throw new Error("GEMINI_API_KEY is not set in environment variables. Please check your Netlify site configuration.");
        }

        // Get the original text from the request body
        const { originalText } = JSON.parse(event.body);
        if (!originalText) {
            return { 
                statusCode: 400, 
                body: JSON.stringify({ error: 'originalText is required.' }) 
            };
        }

        // Construct the detailed prompt for Gemini
        const prompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω chuy√™n nghi·ªáp v·ªÅ tr√¨nh b√†y v√† bi√™n t·∫≠p vƒÉn b·∫£n. Nhi·ªám v·ª• c·ªßa b·∫°n l√† nh·∫≠n m·ªôt ƒëo·∫°n vƒÉn b·∫£n th√¥ v√† ƒë·ªãnh d·∫°ng l·∫°i n√≥ theo M·∫™U ƒë∆∞·ª£c cung c·∫•p m·ªôt c√°ch ch√≠nh x√°c tuy·ªát ƒë·ªëi. KH√îNG thay ƒë·ªïi n·ªôi dung g·ªëc.

**QUY T·∫ÆC CHUNG:**
- **KH√îNG S√ÅNG T·∫†O:** Ch·ªâ s·∫Øp x·∫øp v√† l√†m s·∫°ch vƒÉn b·∫£n g·ªëc. Kh√¥ng th√™m, b·ªõt hay thay ƒë·ªïi b·∫•t k·ª≥ t·ª´ ng·ªØ n√†o trong n·ªôi dung.
- **KH√îNG GI·∫¢I TH√çCH:** Ch·ªâ tr·∫£ v·ªÅ duy nh·∫•t vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng. Kh√¥ng th√™m b·∫•t k·ª≥ l·ªùi gi·ªõi thi·ªáu, gi·∫£i th√≠ch hay b√¨nh lu·∫≠n n√†o.

**C√ÅC B∆Ø·ªöC ƒê·ªäNH D·∫†NG:**

1.  **X·ª≠ l√Ω Ti√™u ƒë·ªÅ:**
    * T√¨m d√≤ng ti√™u ƒë·ªÅ ti·∫øng Vi·ªát (th∆∞·ªùng n·∫±m g·∫ßn ƒë·∫ßu v√† c√≥ th·ªÉ ch·ª©a c√°c emoji nh∆∞ ‚ù§Ô∏è, üå∫).
    * X√≥a t·∫•t c·∫£ emoji v√† c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát.
    * ƒê·ªãnh d·∫°ng l·∫°i ti√™u ƒë·ªÅ th√†nh CH·ªÆ IN HOA.
    * ƒê·∫∑t ti√™u ƒë·ªÅ ƒë√£ x·ª≠ l√Ω ·ªü d√≤ng ƒë·∫ßu ti√™n.

2.  **X·ª≠ l√Ω ƒê·ªëi tho·∫°i ti·∫øng Vi·ªát:**
    * X√°c ƒë·ªãnh c√°c l∆∞·ª£t n√≥i c·ªßa "Nam th√≠nh gi·∫£", "N·ªØ th√≠nh gi·∫£", v√† "ƒê√†i Tr∆∞·ªüng".
    * L√†m s·∫°ch m·ªçi lo·∫°i emoji ƒë·ª©ng tr∆∞·ªõc t√™n ng∆∞·ªùi n√≥i (v√≠ d·ª•: üå∏, üü°, ‚òéÔ∏è, üìû).
    * **CHU·∫®N H√ìA** ti·ªÅn t·ªë ng∆∞·ªùi n√≥i. V√≠ d·ª•: "üå∏N·ªØ Th√≠nh Gi·∫£:" -> "N·ªØ th√≠nh gi·∫£:", "üü°ƒê√†i Tr∆∞·ªüng :" -> "ƒê√†i Tr∆∞·ªüng ƒë√°p:".
    * **QUAN TR·ªåNG:** N·∫øu m·ªôt d√≤ng ch·ª©a c·∫£ c√¢u tr·∫£ l·ªùi v√† c√¢u h·ªèi trong ngo·∫∑c ƒë∆°n (v√≠ d·ª•: "ƒê√†i tr∆∞·ªüng: ... (C√≥ th·ªÉ ... kh√¥ng ·∫°?)"), ph·∫£i **T√ÅCH** th√†nh hai l∆∞·ª£t n√≥i ri√™ng bi·ªát tr√™n hai d√≤ng kh√°c nhau.
    * M·ªói l∆∞·ª£t n√≥i ph·∫£i n·∫±m tr√™n m·ªôt d√≤ng ri√™ng, **kh√¥ng c√≥ d√≤ng tr·ªëng** gi·ªØa c√°c l∆∞·ª£t n√≥i.

3.  **X·ª≠ l√Ω c√°c ph·∫ßn t·ª≠ ƒë·∫∑c bi·ªát:**
    * **X√ìA B·ªé** ho√†n to√†n c√°c d√≤ng ch·ªâ ch·ª©a k√Ω t·ª± ph√¢n c√°ch nh∆∞ '*************'.
    * **X√ìA B·ªé** ho√†n to√†n c√°c d√≤ng ch√∫ th√≠ch c√≥ ƒë·ªãnh d·∫°ng nh∆∞ '* **...**'.

4.  **X·ª≠ l√Ω Ngu·ªìn:**
    * T√¨m d√≤ng ch·ª©a th√¥ng tin ngu·ªìn (v√≠ d·ª•: \`wenda...\`).
    * Ch·ªâ gi·ªØ l·∫°i M·ªòT d√≤ng ngu·ªìn duy nh·∫•t, x√≥a c√°c d√≤ng b·ªã l·∫∑p l·∫°i.
    * ƒê·∫∑t d√≤ng ngu·ªìn n√†y sau kh·ªëi ƒë·ªëi tho·∫°i ti·∫øng Vi·ªát.

5.  **X·ª≠ l√Ω VƒÉn b·∫£n ti·∫øng Trung:**
    * T√°ch ti√™u ƒë·ªÅ ti·∫øng Trung ra m·ªôt d√≤ng ri√™ng.
    * Gi·ªØ nguy√™n kh·ªëi ƒë·ªëi tho·∫°i ti·∫øng Trung, bao g·ªìm c·∫£ ti·ªÅn t·ªë ng∆∞·ªùi n√≥i.

6.  **X·ª≠ l√Ω L·ªùi k·∫øt:**
    * T√¨m c√¢u k·∫øt (b·∫Øt ƒë·∫ßu b·∫±ng "Trong qu√° tr√¨nh d·ªãch...").
    * X√≥a t·∫•t c·∫£ emoji (üôè) ·ªü cu·ªëi c√¢u.
    * ƒê·∫∑t c√¢u k·∫øt n√†y ·ªü v·ªã tr√≠ cu·ªëi c√πng c·ªßa to√†n b·ªô vƒÉn b·∫£n.

7.  **S·∫Øp x·∫øp v√† Tr√¨nh b√†y:**
    * S·∫Øp x·∫øp c√°c kh·ªëi theo th·ª© t·ª± sau:
        1.  Ti√™u ƒë·ªÅ ti·∫øng Vi·ªát (IN HOA)
        2.  ƒê·ªëi tho·∫°i ti·∫øng Vi·ªát
        3.  Ngu·ªìn
        4.  Ti√™u ƒë·ªÅ ti·∫øng Trung
        5.  ƒê·ªëi tho·∫°i ti·∫øng Trung
        6.  L·ªùi k·∫øt
    * S·ª≠ d·ª•ng **m·ªôt l·∫ßn xu·ªëng d√≤ng** (m·ªôt d√≤ng tr·ªëng) ƒë·ªÉ ngƒÉn c√°ch c√°c kh·ªëi ch√≠nh n√†y.

**B√¢y gi·ªù, h√£y x·ª≠ l√Ω vƒÉn b·∫£n sau theo ƒë√∫ng c√°c quy t·∫Øc tr√™n:**

---VƒÇN B·∫¢N G·ªêC---
${originalText}
---H·∫æT VƒÇN B·∫¢N G·ªêC---
`;
        
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
        
        const payload = {
            contents: [{
                role: "user",
                parts: [{ text: prompt }]
            }]
        };

        // Use node-fetch for making the API call in the function environment
        const fetch = (await import('node-fetch')).default;
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            const errorBody = await response.text();
            console.error("API Error:", errorBody);
            return { 
                statusCode: response.status, 
                body: JSON.stringify({ error: `API Error: ${response.statusText}. Check function logs on Netlify for more details.` }) 
            };
        }

        const result = await response.json();
        const formattedText = result.candidates[0].content.parts[0].text;

        // Return the successful response to the frontend
        return {
            statusCode: 200,
            body: JSON.stringify({ formattedText: formattedText.trim() })
        };

    } catch (error) {
        console.error("Function Error:", error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: error.message })
        };
    }
};
